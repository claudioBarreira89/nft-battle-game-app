{"version":3,"sources":["Components/LoadingIndicator/index.js","utils/transformCharacterData.js","constants.js","utils/getContract.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["LoadingIndicator","className","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","CONTRACT_ABI","inputs","internalType","type","stateMutability","anonymous","indexed","outputs","components","getContract","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","console","log","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","mintCharacterNFTAction","characterId","mintCharacterNFT","mintTxn","wait","warn","getCharacters","useCallback","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","useEffect","on","off","length","character","index","src","alt","onClick","Arena","currentAccount","boss","setBoss","attackState","setAttackState","showToast","setShowToast","toastText","setToastText","fetchBoss","getBigBoss","bossTxn","runAttackAction","attackBoss","attackTxn","prevHp","setTimeout","onAttackComplete","from","newBossHp","newPlayerHp","bossHp","playerHp","toString","toLowerCase","prevState","id","value","max","App","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","alert","isCorrectNetwork","networkVersion","fetchNFTMetadata","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iVAceA,EAXU,WACvB,OACE,sBAAKC,UAAU,WAAU,UACvB,wBACA,wBACA,wBACA,0BAGN,ECFeC,EAVgB,SAACC,GAC9B,MAAO,CACLC,KAAMD,EAAcC,KACpBC,SAAUF,EAAcE,SACxBC,GAAIH,EAAcG,GAAGC,WACrBC,MAAOL,EAAcK,MAAMD,WAC3BE,aAAcN,EAAcM,aAAaF,WAE7C,E,QCNMG,EAAe,CACnB,CACEC,OAAQ,CACN,CACEC,aAAc,WACdR,KAAM,iBACNS,KAAM,YAER,CACED,aAAc,WACdR,KAAM,qBACNS,KAAM,YAER,CACED,aAAc,YACdR,KAAM,cACNS,KAAM,aAER,CACED,aAAc,YACdR,KAAM,qBACNS,KAAM,aAER,CACED,aAAc,SACdR,KAAM,WACNS,KAAM,UAER,CACED,aAAc,SACdR,KAAM,eACNS,KAAM,UAER,CACED,aAAc,UACdR,KAAM,SACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,mBACNS,KAAM,YAGVC,gBAAiB,aACjBD,KAAM,eAER,CACEE,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACdR,KAAM,QACNS,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACdR,KAAM,WACNS,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACdR,KAAM,UACNS,KAAM,YAGVT,KAAM,WACNS,KAAM,SAER,CACEE,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACdR,KAAM,QACNS,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACdR,KAAM,WACNS,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,OACdR,KAAM,WACNS,KAAM,SAGVT,KAAM,iBACNS,KAAM,SAER,CACEE,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACdR,KAAM,SACNS,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACdR,KAAM,YACNS,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACdR,KAAM,cACNS,KAAM,YAGVT,KAAM,iBACNS,KAAM,SAER,CACEE,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACdR,KAAM,SACNS,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACdR,KAAM,UACNS,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACdR,KAAM,iBACNS,KAAM,YAGVT,KAAM,qBACNS,KAAM,SAER,CACEE,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACdR,KAAM,OACNS,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACdR,KAAM,KACNS,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACdR,KAAM,UACNS,KAAM,YAGVT,KAAM,WACNS,KAAM,SAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACdR,KAAM,KACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,UACNS,KAAM,YAGVT,KAAM,UACNa,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,GACRP,KAAM,aACNa,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACdR,KAAM,QACNS,KAAM,YAGVT,KAAM,YACNa,QAAS,CACP,CACEL,aAAc,UACdR,KAAM,GACNS,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACRP,KAAM,UACNa,QAAS,CACP,CACEL,aAAc,SACdR,KAAM,OACNS,KAAM,UAER,CACED,aAAc,SACdR,KAAM,WACNS,KAAM,UAER,CACED,aAAc,UACdR,KAAM,KACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,QACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,eACNS,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACRP,KAAM,oBACNa,QAAS,CACP,CACEC,WAAY,CACV,CACEN,aAAc,UACdR,KAAM,iBACNS,KAAM,WAER,CACED,aAAc,SACdR,KAAM,OACNS,KAAM,UAER,CACED,aAAc,SACdR,KAAM,WACNS,KAAM,UAER,CACED,aAAc,UACdR,KAAM,KACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,QACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,eACNS,KAAM,YAGVD,aAAc,wCACdR,KAAM,GACNS,KAAM,UAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACRP,KAAM,0BACNa,QAAS,CACP,CACEC,WAAY,CACV,CACEN,aAAc,UACdR,KAAM,iBACNS,KAAM,WAER,CACED,aAAc,SACdR,KAAM,OACNS,KAAM,UAER,CACED,aAAc,SACdR,KAAM,WACNS,KAAM,UAER,CACED,aAAc,UACdR,KAAM,KACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,QACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,eACNS,KAAM,YAGVD,aAAc,0CACdR,KAAM,GACNS,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACdR,KAAM,UACNS,KAAM,YAGVT,KAAM,cACNa,QAAS,CACP,CACEL,aAAc,UACdR,KAAM,GACNS,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACRP,KAAM,aACNa,QAAS,CACP,CACEC,WAAY,CACV,CACEN,aAAc,SACdR,KAAM,OACNS,KAAM,UAER,CACED,aAAc,SACdR,KAAM,WACNS,KAAM,UAER,CACED,aAAc,UACdR,KAAM,KACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,QACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,eACNS,KAAM,YAGVD,aAAc,4BACdR,KAAM,GACNS,KAAM,UAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACdR,KAAM,QACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,WACNS,KAAM,YAGVT,KAAM,mBACNa,QAAS,CACP,CACEL,aAAc,OACdR,KAAM,GACNS,KAAM,SAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACdR,KAAM,kBACNS,KAAM,YAGVT,KAAM,mBACNa,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,GACRP,KAAM,OACNa,QAAS,CACP,CACEL,aAAc,SACdR,KAAM,GACNS,KAAM,WAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACdR,KAAM,GACNS,KAAM,YAGVT,KAAM,sBACNa,QAAS,CACP,CACEL,aAAc,UACdR,KAAM,iBACNS,KAAM,WAER,CACED,aAAc,SACdR,KAAM,OACNS,KAAM,UAER,CACED,aAAc,SACdR,KAAM,WACNS,KAAM,UAER,CACED,aAAc,UACdR,KAAM,KACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,QACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,eACNS,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACdR,KAAM,GACNS,KAAM,YAGVT,KAAM,aACNa,QAAS,CACP,CACEL,aAAc,UACdR,KAAM,GACNS,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACdR,KAAM,UACNS,KAAM,YAGVT,KAAM,UACNa,QAAS,CACP,CACEL,aAAc,UACdR,KAAM,GACNS,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACdR,KAAM,OACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,KACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,UACNS,KAAM,YAGVT,KAAM,mBACNa,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACdR,KAAM,OACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,KACNS,KAAM,WAER,CACED,aAAc,UACdR,KAAM,UACNS,KAAM,WAER,CACED,aAAc,QACdR,KAAM,OACNS,KAAM,UAGVT,KAAM,mBACNa,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CACEC,aAAc,UACdR,KAAM,WACNS,KAAM,WAER,CACED,aAAc,OACdR,KAAM,WACNS,KAAM,SAGVT,KAAM,oBACNa,QAAS,GACTH,gBAAiB,a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","file":"static/js/main.a7605128.chunk.js","sourcesContent":["import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","const transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n\nexport default transformCharacterData;\n","const CONTRACT_ADDRESS = \"0x593E42D43541d28437C8495E4388860D9A7E3c89\";\n\nconst CONTRACT_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"string[]\",\n        name: \"characterNames\",\n        type: \"string[]\",\n      },\n      {\n        internalType: \"string[]\",\n        name: \"characterImageURIs\",\n        type: \"string[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"characterHp\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"characterAttackDmg\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"string\",\n        name: \"bossName\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"bossImageURI\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bossHp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"bossAttackDamage\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"approved\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ApprovalForAll\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newBossHp\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newPlayerHp\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"AttackComplete\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"characterIndex\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"CharacterNFTMinted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"attackBoss\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"bigBoss\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"imageURI\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"hp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"maxHp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"attackDamage\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"checkIfUserHasNFT\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"characterIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"imageURI\",\n            type: \"string\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"hp\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxHp\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"attackDamage\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct MyEpicGame.CharacterAttributes\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllDefaultCharacters\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"characterIndex\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"imageURI\",\n            type: \"string\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"hp\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxHp\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"attackDamage\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct MyEpicGame.CharacterAttributes[]\",\n        name: \"\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getApproved\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBigBoss\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"string\",\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            internalType: \"string\",\n            name: \"imageURI\",\n            type: \"string\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"hp\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxHp\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"attackDamage\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct MyEpicGame.BigBoss\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_characterIndex\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mintCharacterNFT\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"nftHolderAttributes\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"characterIndex\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"imageURI\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"hp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"maxHp\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"attackDamage\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nftHolders\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ownerOf\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes4\",\n        name: \"interfaceId\",\n        type: \"bytes4\",\n      },\n    ],\n    name: \"supportsInterface\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport { CONTRACT_ADDRESS, CONTRACT_ABI };\n","import { ethers } from \"ethers\";\nimport { CONTRACT_ABI, CONTRACT_ADDRESS } from \"../constants\";\n\nconst getContract = () => {\n  const { ethereum } = window;\n\n  if (ethereum) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n\n    const gameContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      CONTRACT_ABI,\n      signer\n    );\n\n    return gameContract;\n  }\n\n  console.log(\"Ethereum object not found\");\n  return null;\n};\n\nexport default getContract;\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { getContract, transformCharacterData } from \"../../utils\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\nimport \"./SelectCharacter.css\";\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  const mintCharacterNFTAction = async (characterId) => {\n    try {\n      if (gameContract) {\n        setMintingCharacter(true);\n\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn);\n\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error);\n      setMintingCharacter(false);\n    }\n  };\n\n  const getCharacters = useCallback(async () => {\n    try {\n      console.log(\"Getting contract characters to mint\");\n\n      /** Call contract to get all mint-able characters */\n      const charactersTxn = await gameContract.getAllDefaultCharacters();\n      console.log(\"charactersTxn:\", charactersTxn);\n\n      /** Go through all of our characters and transform the data */\n      const characters = charactersTxn.map((characterData) =>\n        transformCharacterData(characterData)\n      );\n\n      /** Set all mint-able characters in state */\n      setCharacters(characters);\n    } catch (error) {\n      console.error(\"Something went wrong fetching characters:\", error);\n    }\n  }, [gameContract]);\n\n  const onCharacterMint = useCallback(\n    async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n\n      /**\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    },\n    [gameContract, setCharacterNFT]\n  );\n\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        {!mintingCharacter && (\n          <button\n            type=\"button\"\n            className=\"character-mint-button\"\n            onClick={() => mintCharacterNFTAction(index)}\n          >{`Mint ${character.name}`}</button>\n        )}\n      </div>\n    ));\n\n  useEffect(() => {\n    const gameContract = getContract();\n    setGameContract(gameContract);\n  }, []);\n\n  useEffect(() => {\n    if (gameContract) {\n      getCharacters();\n\n      /** Setup NFT Minted Listener*/\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract, getCharacters, onCharacterMint]);\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport \"./Arena.css\";\nimport { getContract, transformCharacterData } from \"../../utils\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\nconst Arena = ({ characterNFT, setCharacterNFT, currentAccount }) => {\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState(\"\");\n  const [showToast, setShowToast] = useState(false);\n  const [toastText, setToastText] = useState(\"\");\n\n  const fetchBoss = useCallback(async () => {\n    const bossTxn = await gameContract.getBigBoss();\n    console.log(\"Boss:\", bossTxn);\n    setBoss(transformCharacterData(bossTxn));\n  }, [gameContract]);\n\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState(\"attacking\");\n        console.log(\"Attacking boss...\");\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log(\"attackTxn:\", attackTxn);\n        setAttackState(\"hit\");\n\n        if (boss.prevHp !== boss.hp) {\n          setToastText(\n            `💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`\n          );\n        } else setToastText(`😱 ${characterNFT.name} missed ${boss.name}!`);\n\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error(\"Error attacking boss:\", error);\n      setAttackState(\"\");\n    }\n  };\n\n  const onAttackComplete = useCallback(\n    (from, newBossHp, newPlayerHp) => {\n      const bossHp = newBossHp.toNumber();\n      const playerHp = newPlayerHp.toNumber();\n      const sender = from.toString();\n\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n      /** If player is our own, update both player and boss Hp */\n      if (currentAccount === sender.toLowerCase()) {\n        setBoss((prevState) => {\n          return { ...prevState, hp: bossHp, prevHp: prevState.hp };\n        });\n        setCharacterNFT((prevState) => {\n          return { ...prevState, hp: playerHp };\n        });\n      } else {\n        /** If player isn't ours, update boss Hp only */\n        setBoss((prevState) => {\n          return { ...prevState, hp: bossHp };\n        });\n      }\n    },\n    [currentAccount, setCharacterNFT]\n  );\n\n  useEffect(() => {\n    setGameContract(getContract());\n  }, []);\n\n  useEffect(() => {\n    if (gameContract) {\n      fetchBoss();\n      gameContract.on(\"AttackComplete\", onAttackComplete);\n    }\n\n    return () => {\n      if (gameContract) gameContract.off(\"AttackComplete\", onAttackComplete);\n    };\n  }, [gameContract, fetchBoss, onAttackComplete]);\n\n  return (\n    <div className=\"arena-container\">\n      {/* Add your toast HTML right here */}\n      {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? \"show\" : \"\"}>\n          <div id=\"desc\">{toastText}</div>\n        </div>\n      )}\n\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n\n          {attackState === \"attacking\" ? (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          ) : (\n            <div className=\"attack-container\">\n              <button className=\"cta-button\" onClick={runAttackAction}>\n                {`💥 Attack ${boss.name}`}\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\nimport SelectCharacter from \"./Components/SelectCharacter\";\n\nimport \"./App.css\";\nimport { getContract, transformCharacterData } from \"./utils\";\nimport Arena from \"./Components/Arena\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const checkIfWalletIsConnected = useCallback(async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        setIsLoading(false);\n        return;\n      }\n\n      console.log(\"We have the ethereum object\", ethereum);\n\n      /** Check if we're authorized to access the user's wallet */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      /** User can have multiple authorized accounts, we grab the first one if its there! */\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n            alt=\"Monty Python Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else if (currentAccount && characterNFT) {\n      return (\n        <Arena\n          characterNFT={characterNFT}\n          setCharacterNFT={setCharacterNFT}\n          currentAccount={currentAccount}\n        />\n      );\n    }\n  };\n\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      if (!(await isCorrectNetwork())) return;\n\n      /** Request access to account */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const isCorrectNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== \"5\") {\n        alert(\"Please connect to Goerli!\");\n        return false;\n      }\n    } catch (error) {\n      console.log(error);\n      return false;\n    }\n\n    return true;\n  };\n\n  const fetchNFTMetadata = useCallback(async () => {\n    console.log(\"Checking for Character NFT on address:\", currentAccount);\n\n    const gameContract = getContract();\n    const characterNFT = await gameContract.checkIfUserHasNFT();\n\n    if (characterNFT.name) {\n      console.log(\"User has character NFT\");\n      setCharacterNFT(transformCharacterData(characterNFT));\n    } else {\n      console.log(\"No character NFT found\");\n    }\n\n    setIsLoading(false);\n  }, [currentAccount]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, [checkIfWalletIsConnected]);\n\n  useEffect(() => {\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount, fetchNFTMetadata]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\" />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}